<?php
/**
 * @file
 * A custom module to use Berklee OnePass LDAP authentication
 */


/**
* Implements hook_menu().
* @description : Creating a form page holder, 'spp/account'
*/
function bcm_sppstudent_menu() {
    $items['spp/account'] = array(
      'title' => 'Summer Performance Program Student',
      'page callback' => 'bcm_sppstudent_account_view',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
    return $items;
}

/**
* Callback view function
* @description : view callback function for bcm_sppstudent_menu 'spp/account'
*/
function bcm_sppstudent_account_view() {
	return drupal_get_form('bcm_sppstudent_account_form');
}

/**
* Form for collecting Berklee ID
* @description : form for 'spp/account' page 
*/
function bcm_sppstudent_account_form($form, &$form_state){

	// check if this is after user entered the ID and pressed "Verify Me" button, 
	// and if so, load the second form to create the user account.
	if (isset($form_state['storage']['page_two'])) {
    	return bcm_sppstudent_account_create_form($form, $form_state);
	}

	$form = array (
	  'welcome' => array('#markup' => '<div id="spp-welcome"><h2>Welcome to Berklee!</h2><p>Please take a moment and follow procedures. <br />We need to verify you before we create an account, so you can attend the many trainings we offer.</p></div>', '#weight'=> 0),
	  'bcmid' => array (
	   '#type' => 'textfield',
	   '#title' => t('Berklee ID'), 
	   '#description' => t('Please type in your Berklee ID number without leading zero.'),
	   '#maxlength'=> 16,
       '#size'=> 16,
	   '#required' => TRUE,
	  ),
	  'displayname' => array (
	   '#type' => 'hidden',
	   '#value' => 'spp student name', 
	  ),	  
	  'submit' => array (
	  	'#type' => 'submit',
	  	'#value' => t('Verify Me'),
	  	'#validate' => array('bcm_sppstudent_account_form_validate'),
	  ),
	);
	return $form;	
}
/**
* validate callback function 
* @description : check the length of ID and if leading zero is entered, and find the user by ID in the db table.
*				 Also check the column 'registered' in 'bcm_sppstudent' table if the user has been created before.
*/
function bcm_sppstudent_account_form_validate($form, &$form_state){

	$id2check = $form_state['values']['bcmid'];
	if(strlen($id2check) < 6 || $id2check[0] == '0' ) {
		form_set_error('', t('please type in full 6 digits Berklee ID number without leading zero!'));
	}
	else
	{
		$result = db_select('bcm_sppstudent', 'b')->fields('b', array('registered', 'bcmid'))->condition('b.bcmid', $id2check, '=')->execute()->fetchAssoc();
		
		if(!$result){ 
			form_set_error('', t('The ID you entered is not a valid ID, please try again!'));		
		}
		else if($result && $result['registered'] == 1)
		{
			form_set_error('', t('You have been created your account previously, please visit main site and log in from there. If you are sure that it is your first time visiting this page, please contact Leanring Center Staff.'));
		}		
	}
}
/**
* Submit hander callback function
* @description : this callback function will be called after validate success
*/
function bcm_sppstudent_account_form_submit($form, &$form_state) {
 
		$form_state['storage']['page_two'] = TRUE;
		$form_state['rebuild'] = TRUE; 
}

/**
* second view form function 
* @description : form for creating the new user account, after the user is verified.
*/
function bcm_sppstudent_account_create_form($form, $form_state)
{	
	$result = db_select('bcm_sppstudent', 'b')->fields('b', array('uid', 'registered', 'bcmid', 'fullname', 'barcode'))->condition('b.bcmid', $form_state['input']['bcmid'], '=')->execute()->fetchAssoc();	
	$bcmid = $result['bcmid']; $displayname = $result['fullname'];

	$form = array (
	 'welcome' => array( 
	   '#type' => 'markup',
	   '#markup' => '<h2>Welcome <b>'.$displayname.'</b></h2><p>Please enter your <i>personal</i> Email address and create a new password. (This will be your login for this system)<br /><span style="color:red; font-weight;">Please consider that you will not be able to change your Email and Password once your account is created.</span></p>',
	   '#tree' => true,
	  ),
	  'bcmid' => array (
	   '#type' => 'textfield',
	   '#title' => t('Berklee ID'), 
	   '#value' => t($bcmid),
	   '#description' => '',
	   '#maxlength'=> 16,
       '#size'=> 16,
	   '#disabled' => TRUE,
	  ),
	  'displayname' => array (
	   '#type' => 'textfield',
	   '#title' => t('Display Name'), 
	   '#value' => t($displayname),
	   '#description' => '',
	   '#maxlength'=> 64,
       '#size'=> 64,
	   '#disabled' => TRUE,
	  ),
	  'email' => array (
	   '#type' => 'textfield',
	   '#title' => t('E-mail'), 
	   '#description' => 'Please type in the email address you want to use',
	   '#maxlength'=> 64,
       '#size'=> 64,
	   '#disabled' => FALSE,
	   '#required' => TRUE,
	  ),
	  'emailconfirm' => array (
	   '#type' => 'textfield',
	   '#title' => t('Confirm E-mail'), 
	   '#description' => 'Please confirm the email address',
	   '#maxlength'=> 64,
       '#size'=> 64,
	   '#disabled' => FALSE,
	   '#required' => TRUE,
	  ),
	  'password' => array(
	  	'#type' => 'password_confirm',
	  	'#description' => t('Enter the same password in both fields'),
	  	'#size' => 32,
	  	'#required' => TRUE,
	  ),
	  'occupation' => array ('#type' => 'hidden', '#value' => 'student spp',),
  	  'berkleeid' => array ('#type' => 'hidden', '#value' => $bcmid,),
  	  'displayname' => array ('#type' => 'hidden', '#value' => $displayname,),  	  
 	  	  	  
	  'submit' => array (
	  	'#type' => 'submit',
	  	'#value' => t('Create My Account'),
	  	'#validate' => array('bcm_sppstudent_account_create_form_validate'),
	  ),
	);
	
	$form['#submit'] = array('bcm_sppstudent_account_create_form_submit');
	return $form;	
	
	
}
/**
* validate form function
* @description : 1. validate email, 2. confirm email, 3. if the email is being used already.
*/

function bcm_sppstudent_account_create_form_validate($form, &$form_state){

	if (!valid_email_address($form_state['values']['email'])) {	form_set_error('email', t('The email address is not valid!')); }

	if ($form_state['values']['email'] != $form_state['values']['emailconfirm']) { form_set_error('emailconfirm', t('The email addresses do not match!'));	}
	
	if (user_load_by_name($form_state['values']['email'])) { form_set_error('', t('The email is already in use or you have created this user before! Please contact the Learning Center staff if you need to reset.'));}
	
}
/**
* second submit form function
* @description : create a user and redirect to user login page.
*/
function bcm_sppstudent_account_create_form_submit($form, &$form_state){

	$fields = array(
		'name' => $form_state['input']['emailconfirm'],
		'mail' => $form_state['input']['emailconfirm'],
		'pass' => $form_state['input']['password']['pass2'],
		'status' => 1,
		'init' => $form_state['input']['emailconfirm'],
		'roles' => array(DRUPAL_AUTHENTICATED_RID => 'authenticated user','1008' => 'student spp',),
		'field_ldap_id' => array('und' => array( 0 => array('value' => $form_state['input']['berkleeid'],),),),
		'field_ldap_info' => array('und' => array( 0 => array('value' => 'Summer Performance Program ',),),),
		'field_ldap_displayname' => array('und' => array( 0 => array('value' => $form_state['input']['displayname'],),),),
	);
	
	$newuser = user_save('', $fields);	$now = date('Y-m-d H:i:s', time());
	$update = db_update('bcm_sppstudent')->fields(array('registered' => 1, 'created' => $now))->condition('bcmid', $form_state['input']['berkleeid'], '=')->execute();
	drupal_set_message(t('Your account has been created, your username is "'.$newuser->name.'". Remember, we do not email your password for security reason, if you ever need to change the username and/or password, you have to contact Learning Center Staff.'));	 	
	
	$form_state['redirect'] = 'home';
}

/**
* Implements hook_init()
* @description : add the sppstudent login to the login link
*/
function bcm_sppstudent_init() {
	global $user;
  if($user->uid == 0){
		drupal_add_js(drupal_get_path('module', 'bcm_sppstudent') . '/bcm_sppstudent.js');
  }elseif($user->uid != 0 && in_array('student spp',$user->roles)){
		drupal_add_js(drupal_get_path('module', 'bcm_sppstudent') . '/bcm_sppstudent-logout.js');
	}
  
}
/**
* Implements hook_form_FORM_ID_alter()
* @description : insert 'spp/account' link in the general user login block form
*/
function bcm_sppstudent_form_user_login_block_alter(&$form, &$form_state){
	_bcm_sppstudent_user_login_form_alter($form, $form_state);
}
/**
* Implements hook_form_FORM_ID_alter()
* @description : insert 'spp/account' link in the general user login form page '/user'
*/
function bcm_sppstudent_form_user_login_alter(&$form, &$form_state){
	_bcm_sppstudent_user_login_form_alter($form, $form_state);
}

function _bcm_sppstudent_user_login_form_alter(&$form, &$form_state){
	$form['name']['#weight'] = 1; $form['pass']['#weight'] = 2;
	$form['sppstudent'] = array('#markup' => '<div class="messages warning"><a href="'.url("spp/account").'" style="margin-left:8px; font-style:bold; color:#000;"> * Click here to create your accout first if never logged in this site before.</a></div>', '#weight'=> 0); 
	$form['name']['#title'] = "Login email";
	$form['name']['#description'] = "Your registered email address with Berklee Summer Program";
	$form['pass']['#description'] = "The password you created for the Learning Center account";
	
	drupal_set_title("Summer Program Student Login");
	
	/* this wouldn't work currently due to "noreqnewpass" module *
	$user_login_final_validate_index = array_search('user_login_final_validate', $form['#validate']);
 	if ($user_login_final_validate_index >= 0) {
 	  $form['#validate'][$user_login_final_validate_index] = '_bcm_sppstudent_final_validate';
 	}
	/**/
}
/*
function _bcm_sppstudent_final_validate($form, &$form_state) {
  if (empty($form_state['uid'])) {
    // Always register an IP-based failed login event.
    flood_register_event('failed_login_attempt_ip', variable_get('user_failed_login_ip_window', 3600));
    // Register a per-user failed login event.
    if (isset($form_state['flood_control_user_identifier'])) {
      flood_register_event('failed_login_attempt_user', variable_get('user_failed_login_user_window', 21600), $form_state['flood_control_user_identifier']);
    }

    if (isset($form_state['flood_control_triggered'])) {
      if ($form_state['flood_control_triggered'] == 'user') {
        form_set_error('name', format_plural(variable_get('user_failed_login_user_limit', 5), 'Sorry, there has been more than one failed login attempt for this account. It is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', 'Sorry, there have been more than @count failed login attempts for this account. It is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', array('@url' => url('user/password'))));
      }
      else {
        // We did not find a uid, so the limit is IP-based.
        form_set_error('name', t('Sorry, too many failed login attempts from your IP address. This IP address is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', array('@url' => url('user/password'))));
      }
    }
    else {
      // Use $form_state['input']['name'] here to guarantee that we send
      // exactly what the user typed in. $form_state['values']['name'] may have
      // been modified by validation handlers that ran earlier than this one.
      $query = isset($form_state['input']['name']) ? array('name' => $form_state['input']['name']) : array();
      form_set_error('name', t('Sorry, unrecognized username or password. <a href="@password">Have you forgotten your password?</a>', array('@password' => url('user/password', array('query' => $query)))));
      watchdog('user', 'Login attempt failed for %user.', array('%user' => $form_state['values']['name']));
    }
  }
  elseif (isset($form_state['flood_control_user_identifier'])) {
    // Clear past failures for this user so as not to block a user who might
    // log in and out more than once in an hour.
    flood_clear_event('failed_login_attempt_user', $form_state['flood_control_user_identifier']);
  }
}/**/



























